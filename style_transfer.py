# -*- coding: utf-8 -*-
"""style transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t8bZ1M90GqZmQ-7HhygfWGsqKzU8vNNR
"""

import tensorflow as tf
def tensor_to_image(tensor):
  tensor = tensor*255
  tensor = np.array(tensor, dtype=np.uint8)
  if np.ndim(tensor)>3:
    assert tensor.shape[0] == 1
    tensor = tensor[0]
  return PIL.Image.fromarray(tensor)

def image_to_tensor(path_to_img):
  img = tf.io.read_file(path_to_img)
  img = tf.image.decode_image(img, channels=3, dtype=tf.float32)

  img = tf.image.resize(img, [512, 512])
  img = img[tf.newaxis, :]
  return img

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
img = mpimg.imread('/content/Cat.png')
imgplot1 = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/forest.jpeg')
imgplot1 = plt.imshow(img)
plt.show()

cat_tensor = image_to_tensor('/content/Cat.png')

style_tensor = image_to_tensor('/content/forest.jpeg')

import tensorflow_hub as hub
import numpy as np
import PIL.Image
import time
import functools
hub_module = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/1')
stylized_image = hub_module(tf.constant(cat_tensor), tf.constant(style_tensor))[0]
tensor_to_image(stylized_image)